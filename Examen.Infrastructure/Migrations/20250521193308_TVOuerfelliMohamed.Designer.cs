// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(EXContext))]
    [Migration("20250521193308_TVOuerfelliMohamed")]
    partial class TVOuerfelliMohamed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Chaine", b =>
                {
                    b.Property<int>("ChaineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChaineId"));

                    b.Property<string>("NomChaine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomProgramme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Thematique")
                        .HasColumnType("int");

                    b.HasKey("ChaineId");

                    b.ToTable("Chaines");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Programme", b =>
                {
                    b.Property<int>("ProgrammeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgrammeId"));

                    b.Property<string>("Animateur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChaineId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duree")
                        .HasColumnType("time");

                    b.Property<string>("NomProgramme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProgrammeId");

                    b.HasIndex("ChaineId");

                    b.ToTable("Programme");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Utilisateur", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtilisateurId"));

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomUtilisateur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeeUtilisateur")
                        .HasColumnType("int");

                    b.HasKey("UtilisateurId");

                    b.ToTable("Utilisateurs");

                    b.HasDiscriminator<int>("TypeeUtilisateur").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Visionnage", b =>
                {
                    b.Property<int>("UtilisateurFk")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammeFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateVisionnage")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Favori")
                        .HasColumnType("bit");

                    b.HasKey("UtilisateurFk", "ProgrammeFk", "DateVisionnage");

                    b.HasIndex("ProgrammeFk");

                    b.ToTable("Visionnages");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Premuim", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Utilisateur");

                    b.Property<DateTime>("DateExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("PointsFidelite")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Standard", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Utilisateur");

                    b.Property<bool>("PubliciteActivee")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Programme", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Chaine", "Chaine")
                        .WithMany("Programmes")
                        .HasForeignKey("ChaineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chaine");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Visionnage", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Programme", "Programme")
                        .WithMany("Visionnages")
                        .HasForeignKey("ProgrammeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Utilisateur", "Utilisateur")
                        .WithMany("Visionnages")
                        .HasForeignKey("UtilisateurFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Programme");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Chaine", b =>
                {
                    b.Navigation("Programmes");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Programme", b =>
                {
                    b.Navigation("Visionnages");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Utilisateur", b =>
                {
                    b.Navigation("Visionnages");
                });
#pragma warning restore 612, 618
        }
    }
}
